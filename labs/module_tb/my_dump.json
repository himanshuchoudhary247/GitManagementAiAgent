{
  "tb_top_ru_hpp": "#pragma once\n#include \"npucommon.hpp\"\n#include \"npudefine.hpp\"\n#include \"ru.hpp\"\n#include \"tb_ru_funccore.hpp\"\n\nclass tb_top_ru: public sc_core::sc_module {\npublic:\n    SC_HAS_PROCESS(tb_top_ru);\n    tb_top_ru(sc_core::sc_module_name name, int argc, char* argv[]);\n    sc_in<bool> clk;\n    sc_in<bool> reset;\n    ru dut;\n    tb_ru_funccore tb;\nprivate:\n\n    sc_fifo<npuc2mmu_PTR > npuc2mmu_fifo;\n    sc_fifo<mmu2npuc_PTR > mmu2npuc_fifo;\n    std::array< sc_fifo <mmu2ru_PTR>*, 16 > mmu2ru_fifo; \n    std::array< sc_fifo < ru2tcm_PTR>*,4 > ru2tcm fifo; \n    std::arrays< sc_fifo<ru2mlsu_PTR >*, 4> ru2mlsu_fifo; \n    sc_fifo< sfr_PTR > reg map_fifo;\n\nvoid init();\nvoid end_of_elaboration();\n\n};",
  "tb_ru_funccore.hpp": "#pragma once\n#include \"npucommon.hpp\"\n#include \"npudefine.hpp\"\n\nclass tb_ru_funccore: public sc_core::sc_module {\npublic:\n    SC_HAS_PROCESS(tb_ru_funccore);\n    sc_in<bool> clk;\n    tb_ru_funccore(sc_core::sc_module_name name);\n    sc_fifo_out<npuc2mmu_PTR > o_npuc2mmu; \n    sc_fifo_out<mmu2npuc_PTR > o_mmu2npuc;\n    sc_in<bool> reset;\n    sc_vector< sc_fifo_out< mmu2ru_PTR > > o_mmu2ru;\n    sc_vector< sc_fifo_ink ru2tcm PTR > > 1_ru2tcm;\n    sc_vector< sc_fifo_ink ružmisu PTR > > i_ru2mlsu;\n    sc_core::sc_fifo_out< sfr_PTR > o_reg_map;\n    void set_id(int id);\n    void set_args(int argc, char* argv[]);\nprivate:\n    int id;\n    int argc_;\n    char** argv_;\n\n};",
  "tb_top_ru.cpp": "#include \"tb_top_ru.hpp\"\n\ntb_top_ru::tb_top_ru(sc_core::sc_module_name name, int argc, char* argv[])\n    : clk(\"clk\")\n    ,reset(\"reset\")\n    ,dut(\"dut\", 0)\n    ,tb(\"tb\")\n    ,npuc2mmu_fifo(\"npuc2mmu_fifo\", 1) \n    ,mmu2npuc_fifo(\"mmu2npuc_fifo\", 1) \n    ,reg_map_fifo(\"reg_map_fifo\",1)\n\nvoid tb_top_ru::init()\n{\n    for(unsigned i = 0; i < mmu2ru_fifo.size(); i++)\n        mmu2ru_fifo.at(i) = new sc_fifo<mu2ru PTR>(1);\n\n    for(unsigned i = 0; i < ru2tcm_fifo.size(); i++)\n        ru2tcm_fifo.at(i) = new sc_fifo<ru2tem_PTR>(1);\n\n    for(unsigned i=0; i < ružmisu fifo.size(); і++)\n        ru2mlsu_fifo.at(i) - new sc fifocružmisu PTR>(1);\n\n    dut.clk(clk);\n    dut.reset(reset);\n    dut.i_reg_map(reg_map_fifo);\n    dut.set_id(0);\n\n    tb.clk(clk);\n    tb.reset(reset); tb.o_reg_map(reg map_fifo);\n    tb.set_id(0);\n\n    dut.1_npuc2msu (приc2rmu_fifo);\n    tb.o_прис2mu (npuc2mmu_fifo);\n    dut.imu2npuc (mau2npuc_fifo);\n    tb.o_mmu2npuc (mmu2npuc_fifo);\n    for(int i=0;i < 16; i++){\n        dut.i_mmu2ru.at(i)(*mmu2ru_fifo.at(i)); \n        tb.o_mmu2ru.at(i)(*mmu2ru_fifo.at(i));\n    }\n\n    for(int i=0;i < 4; i++){\n        dut.o_ru2tcm.at(i)(*ru2tcm_fifo.at(i));\n        tb.i_ru2tcm.at(i)(*ru2tcm_fifo.at(i));\n    }\n\n    for(int i=0;i < 4; i++){\n        dut.o_ru2mlsu.at(i) (*ru2mlsu_fifo.at(i)); \n        tb.i_ru2mlsu.at(i)(*ru2mlsu_fifo.at(i));\n\n    }\n\n}\nvoid tb_top_ru:: end_of_elaboration()\n{}",
  "tb_main.cpp": "#include \"tb_top_ru.hpp\"\n\nsc_trace_file *tf;\n\nint sc_main(int argc, char* argv[])\n{\n    sc_clock clk(\"clk\", 10, SC_NS);\n    sc_signal bool > reset;\n    tb_top_ru test_top(\"test_top\", argc, argv);\n    test_top.clk(clk);\n    test_top.reset(reset);\n    sc_start();\n    return 0;\n}",
  "ru.hpp": "#pragma once\n#include \"npucommon.hpp\"\n#include \"npudefine.hpp\"\n#include \"ru_funccore.hpp\"\n\nclass ru: public sc_core::sc_module {\npublic:\nSC_HAS_PROCESS(ru);\nru(sc_core::sc_module_name name, int id);\n    sc_in<bool> clk;\n    sc_in<bool> reset;\n    sc_fifo_inenpuc2mmu_PTR > i_npuc2mu;\n    sc_fifo_incmmu2npuc PTR > immu2npuc;\n    sc_vector sc_fifo_ine mmu2ru PTR > > immu2ru;\n    sc_vector< sc_fifo_out< ru2tcm_PTR > > o_ru2tcm;\n    sc_vector sc_fifo_out< ru2mlsu PTR > > o_ru2mlsu;\n    sc_fifo_int sfr_PTR > i_reg_map;\n\nvoid set_id(int set_id);\nprivate:\n    ru_funccore funccore;\n        int id;\n};",
  "ru_funccore.hpp": "#pragma once\n#include \"npucommon.hpp\"\n#include \"npudefine.hpp\"\n#define DEBUG_LOG_SEVERITY 0\n\nclass ru_funccore: public sc_core::sc_module {\npublic:\nSC_HAS_PROCESS(ru_funccore);\nru_funccore(sc_core::sc_module_name name);\n    sc_in<bool> clk;\n    sc_in<bool> reset;\n    sc_fifo_in<npuc2mmu PTR > i_npuc2mmu;\n    sc_fifo_in<mmu2npuc PTR > i_mmu2npuc;\n    sc_vector< sc_fifo_ink mmu2ru mmu2ru PTR > > i_mmu2ru;\n    sc_vector< sc_fifo_out< ru2tcm PTR > > o_ru2tcm;\n    sc_vector< sc_fifo_out< ru2mlsu PTR > > o_ru2mlsu;\n    sc_fifo_ink sfr_PTR > i_reg map;\n\nvoid set_Id(int set_id);\nprivate:\n    int id;\n};\n",
  "tb_ru_funccore.cpp": "#define DEBUG_LOG_SEVERITY_TB 0\n#include \"tb_ru_funccore.hpp\"\n#include <dirent.h>\n\ntb_ru_funccore::tb_ru_funccore(sc_core::sc_module_name name)\n    : clk(\"clk\")\n    ,reset(\"reset\")\n    ,o_npuc2mmu(\"o_npuc2mmu\")\n    ,o_mmu2npuc(\"o_mmu2npuc\")\n    ,o_mmu2ru(\"o_mmu2ru\",16)\n    ,i_ru2tcm(\"i_ru2tcm\",4)\n    ,i_ru2mlsu(\"i_ru2mlsu\",4)\n    ,o_reg_map(\"o_reg_map\")\n\n{}\n\nvoid tb_ru_funccore::set_id(int id)\n{\n    id_ = id;\n}\n\ntb_ru_funccore::set_args(int argc, char* argv[]ORP\n{\n    argc_=argc;\n    argv_=argv;\n}\n"
}